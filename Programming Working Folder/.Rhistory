# ======= Section 0: Declarations and Preparing Files =========
# Leave uncommented if you want to clear the environment at the start of the run - WARNING - will erase all current variables and data!
#rm(list=ls())
#Set the working directory so it can find the correct file. This will need to be changed on different computers.
#setwd("C:/Users/hawes0/GitHub/ESPA-CAMP-ABM/Programming Working Folder")
library(RNetLogo)
# the initialization function
prepro <- function(dummy, gui, nl.path, nl.jarname, model.path) {
library(RNetLogo)
NLStart(nl.path=nl.path,gui=TRUE, nl.obj=NULL, is3d=FALSE, nl.jarname=nl.jarname)
NLLoadModel(model.path)
}
# the simulation function
## Need to set Generating Worlds, FixRandomSeed?, RandomSeed, Animate?, and PopulateMethod prior to importing a world.
## To import the world, we need the WorldFileName
simfun <- function(FixRandomSeed,RandomSeed,PopulateMethod,WorldFileName,Animate, #End of Stage 1 Variables
ExperimentName,DecisionMaking,NumberOfSeasons,Tracers,WriteCropBudgets,WriteDetailedCropBudgets,WriteOutputs,StartingTicks,
ExperimentalToleranceForLoss,PerceptionThreshold,BeliefInSocialSanctionsAverage,SimulateESPA_CAMP,ExperimentVariablesFile,
PrintReporters,IACPhysArousThreshold,F_Ratio_V,RandomStartingMoney,F_Ratio_W,UseRandomRotations,WaterRightDistribution,RunNumber,
TypicalAmountFarmerIsWillingToLosePerField,Animate,ROISeasonTolerance,SocialConnectionsperFarmer,InputIntensityDistribution,
LognormalSigma,InternalScalar,IndividualFieldCalcs,BeliefInESPASD,GeneratingWorlds,BeliefInSocialSanctionsSD,ExternalScalar,
EfficacyScalar,AcreageDistributionType,RhythmScalar,InterfaceVariableFileName,BeliefInESPAAverage,CustomFarmerAccess,PopulateMethod,
BeliefsInEconomicSanctionsSD,waterpreference,OffsetIrrigationWithSkill,ChargeForOverdraw,ConsultantsperFarmer,BeliefInEconomicSanctionsAverage,
UseAquaCrop,PercVarWillingnessToLose,GWD,WaterRightSeniorityDistribution) #End of Stage 2 Variables
{
IntroPrint <- cat("Starting a simulation in ", WorldFileName, " with ", DecisionMaking, " for ", NumberOfSeasons, " years.", sep="")
# Beginning setup with initialization
NLCommand("set FixRandomSeed?", FixRandomSeed)
NLCommand("set RandomSeed", RandomSeed)
NLCommand("set PopulateMethod", PopulateMethod)
NLCommand("set WorldFileName", WorldFileName)
NLCommand("set Animate?", Animate)
NLCommand("setupStage1R")
# Initialize new variables before Setup Stage 2
NLCommand("set FixRandomSeed?", FixRandomSeed)
NLCommand("set RandomSeed", RandomSeed)
NLCommand("set ExperimentName", ExperimentName)
NLCommand("set Decision-Making", DecisionMaking)
NLCommand("set NumberOfSeasons", NumberOfSeasons)
NLCommand("set Tracers?", Tracers)
NLCommand("set WriteCropBudgets?", WriteCropBudgets)
NLCommand("set WriteDetailedCropBudgets?", WriteDetailedCropBudgets)
NLCommand("set WriteOutputs?", WriteOutputs)
NLCommand("set StartingTicks", StartingTicks)
NLCommand("set ExperimentalToleranceforLoss", ExperimentalToleranceForLoss)
NLCommand("set PerceptionThreshold", PerceptionThreshold)
NLCommand("set BeliefInSocialSanctionsAverage", BeliefInSocialSanctionsAverage)
NLCommand("set Simulate-ESPA_CAMP", SimulateESPA_CAMP)
NLCommand("set ExperimentVariablesFile", ExperimentVariablesFile)
NLCommand("set PrintReporters?", PrintReporters)
NLCommand("set IAC-PhysArous-Threshold", IACPhysArousThreshold)
NLCommand("set F-Ratio-V", F_Ratio_V)
NLCommand("set RandomStartingMoney", RandomStartingMoney)
NLCommand("set F-Ratio-W", F_Ratio_W)
NLCommand("set UseRandomRotations?", UseRandomRotations)
NLCommand("set WaterRightDistribution", WaterRightDistribution)
NLCommand("set Run-Number", RunNumber)
NLCommand("set TypicalAmountFarmerIsWillingToLosePerField", TypicalAmountFarmerIsWillingToLosePerField)
NLCommand("set Animate?", Animate)
NLCommand("set ROISeasonTolerance", ROISeasonTolerance)
NLCommand("set Social-Connections-per-Farmer", SocialConnectionsperFarmer)
NLCommand("set InputIntensityDistribution", InputIntensityDistribution)
NLCommand("set Lognormal-Sigma", LognormalSigma)
NLCommand("set InternalScalar", InternalScalar)
NLCommand("set IndividualFieldCalcs?", IndividualFieldCalcs)
NLCommand("set BeliefInESPASD", BeliefInESPASD)
NLCommand("set GeneratingWorlds?", GeneratingWorlds)
NLCommand("set BeliefInSocialSanctionsSD", BeliefInSocialSanctionsSD)
NLCommand("set ExternalScalar", ExternalScalar)
NLCommand("set EfficacyScalar", EfficacyScalar)
NLCommand("set AcreageDistributionType", AcreageDistributionType)
NLCommand("set RhythmScalar", RhythmScalar)
NLCommand("set InterfaceVariableFileName", InterfaceVariableFileName)
NLCommand("set BeliefInESPAAverage", BeliefInESPAAverage)
NLCommand("set CustomFarmerAccess", CustomFarmerAccess)
NLCommand("set PopulateMethod", PopulateMethod)
NLCommand("set BeliefsInEconomicSanctionsSD", BeliefsInEconomicSanctionsSD)
NLCommand("set water-preference", waterpreference)
NLCommand("set OffsetIrrigationWithSkill?", OffsetIrrigationWithSkill)
NLCommand("set ChargeForOverdraw", ChargeForOverdraw)
NLCommand("set Consultants-per-Farmer", ConsultantsperFarmer)
NLCommand("set BeliefInEconomicSanctionsAverage", BeliefInEconomicSanctionsAverage)
NLCommand("set Use-Aqua-Crop", UseAquaCrop)
NLCommand("set PercVarWillingnessToLose", PercVarWillingnessToLose)
NLCommand("set GWD", GWD)
NLCommand("set WaterRightSeniorityDistribution", WaterRightSeniorityDistribution)
NLCommand("setupStage2R")
# Setup complete
i <- 1
while (i <= NumberOfSeasons) {
NLCommand("SimulateASeasonR")
i <- i + 1
}
NLCommand("EvaluateRun")
ret <- data.frame(NLReport("count turtles"), NLReport("potato-count"), NLReport("beet-count"),
NLReport("alfalfa-count"), NLReport("a-p-count"), NLReport("alfalfa-total-count"),
NLReport("sw-count"), NLReport("ww-count"), NLReport("corn-count"),
NLReport("grain-count"), NLReport("barley-count"), NLReport("total-crops"))
names(ret) <- c("Turtles","Potatoes","Beets","Alfalfa","Alf-Per","Alf-Tot","Spr-Wht","Wint-Wht","Corn","Grain","Barley","Total")
return(ret)
}
# Run evaluation
evaluateSim <- function()
{
NLCommand("EvaluateRun")
names(res) <- c()
}
# the quit function
postpro <- function(x) {
NLQuit()
}
# ======= End Section 0: Declarations and Preparing Files =====
library(RNetLogo)
